package org.firstinspires.ftc.teamcode.team11943.OpModes.TeleOp;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import org.firstinspires.ftc.teamcode.team11943.subsystems.Claw;
import org.firstinspires.ftc.teamcode.team11943.subsystems.Hang;
import org.firstinspires.ftc.teamcode.team11943.subsystems.LinearSlide;
import org.firstinspires.ftc.teamcode.team11943.subsystems.RobotCentricMecanum;
import org.firstinspires.ftc.teamcode.team11943.subsystems.AngleMechanism;

@Disabled
@TeleOp(group="A1")
public class Qual1IntoTheDeep extends OpMode {

    private AngleMechanism angleServo;
    private LinearSlide slide;
    private RobotCentricMecanum drive;
    private Hang hang;
    private Claw c;

    //    private FieldCentricMecanum fcm;


    @Override
    public void init(){
        telemetry.addLine("INIT() CALLED");

        //servo
        angleServo = new AngleMechanism(hardwareMap, telemetry);

        //linear slide
        slide = new LinearSlide(hardwareMap, telemetry);
        slide.stop();


        //drivetrain: fcm
//        telemetry = new MultipleTelemetry(this.telemetry, FtcDashboard.getInstance().getTelemetry());
//        fcm = new FieldCentricMecanum(hardwareMap, telemetry);
//        fcm.stop();

        //drivetrain: rcm
//        telemetry = new MultipleTelemetry(this.telemetry, FtcDashboard.getInstance().getTelemetry());
        drive = new RobotCentricMecanum(hardwareMap, telemetry);
        drive.stop();
//
        //hang
        hang = new Hang(hardwareMap, telemetry);
        hang.stop();

        //claw
        c = new Claw(hardwareMap, telemetry);
    }

    @Override
    public void init_loop() {
        telemetry.addLine("INIT_LOOP() CALLED");
//        telemetry.addLine("hello world");
    }

    @Override
    public void start() {
        telemetry.addLine("START() CALLED");
    }

    @Override
    public void loop() {

        //angle control
        if (gamepad2.y) {
            angleServo.max_position();
        }
        else if (gamepad2.a) {
            angleServo.min_position();
        }
        else if (gamepad2.b) {
            angleServo.specimen_position();
        }
        else if (gamepad2.x) {
            angleServo.mid_position();

        } else if (gamepad2.dpad_up){
            angleServo.end_position();
        }

//        else if (gamepad1.right_trigger > 0) {
//            servo.set_position(gamepad1.right_trigger);
//        }
        angleServo.reportTelemetry();

        // linear slide controls
        if (gamepad2.right_trigger > 0) {
            slide.raise(gamepad2.right_trigger);
        }
        else if (gamepad2.left_trigger > 0) {
            slide.lower(gamepad2.left_trigger);
        }
        else if (gamepad2.left_bumper) {
            slide.undoLimit();
        }
        else if (gamepad2.right_bumper) {
            slide.redoLimit();
        }
        else {
            slide.stop();
        }
        slide.reportTelemetry();


         // drive train controls: fcm
//        double y = -gamepad1.left_stick_y;
//        double x = gamepad1.left_stick_x;
//        double rx = gamepad1.right_stick_x;


//        if (gamepad1.options) {
//            fcm.resetYaw();
//            telemetry.addLine("resetting yaw !!!!");
//        }
//
//        fcm.drive(x, y, rx);

        //drive train controls: rcm
        double y = -gamepad1.left_stick_y;
        double x = gamepad1.left_stick_x;
        double rx = gamepad1.right_stick_x;

        drive.drive(x, y, rx);

        // A button is an emergency stop
        if (gamepad1.a) {
            drive.stop();
        }

        //hang controls
        if (gamepad1.right_trigger > 0) {
            hang.raise(gamepad1.right_trigger);
        }
        else if (gamepad1.left_trigger > 0) {
            hang.lower(gamepad1.left_trigger);
        }
        else {
            hang.stop();
        }

        //claw
        boolean xb = gamepad1.cross;
        c.grab(xb);
    }

    @Override
    public void stop() {
        telemetry.addLine("STOP() CALLED");
        slide.stop();
        slide.disable_brake();

        hang.stop();
        hang.disable_brake();
    }
}
